<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on trebaud</title><link>https://trebaud.github.io/tags/security/</link><description>Recent content in Security on trebaud</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Jan 2024 15:11:20 -0500</lastBuildDate><atom:link href="https://trebaud.github.io/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>APT install kali linux repos in Ubuntu 22.04</title><link>https://trebaud.github.io/posts/install-kali/</link><pubDate>Sun, 28 Jan 2024 15:11:20 -0500</pubDate><guid>https://trebaud.github.io/posts/install-kali/</guid><description>
&lt;p>If you recently tried adding a new linux source repository in Ubuntu 22.04, then you might have seen this warning mesage:&lt;/p>
&lt;pre tabindex="0">&lt;code>Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).
&lt;/code>&lt;/pre>&lt;p>Apt-key is a sub-command of apt used to manage asymmetric encryption keys in order to authenticate packages. It was found some time ago to be vulnerable to man-in-the-middle attacks (see &lt;a href="https://security-tracker.debian.org/tracker/CVE-2011-3374">CVE-2011-3374&lt;/a>). Now it has finally been deprecated and will be deleted at some point in the future.&lt;/p></description></item><item><title>Bug Bounty 101 (a triager's perspective)</title><link>https://trebaud.github.io/posts/bug-bounty-management-101/</link><pubDate>Sat, 04 Nov 2023 18:22:34 -0400</pubDate><guid>https://trebaud.github.io/posts/bug-bounty-management-101/</guid><description>
&lt;p>Bug bounties (BB) are rapidly becoming an essential part of the modern security toolkit for most companies. And for good reason, they provide a cost effective way of exposing your application to a potentially vast range of experts and catch security holes that would otherwise take time and effort to find.&lt;/p>
&lt;p>From experience unless you have a dedicated team working full time on security, most bugs uncovered by internal teams are done so in a serendipitous way. Regular pentests are useful for improving security controls and provide that extra compliance check but I find that results are often limited especially when it comes to application security and business logic bugs.&lt;/p></description></item></channel></rss>